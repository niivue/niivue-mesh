class C{idx(e,t,s,l){return s*l[0]*l[1]+t*l[0]+e}check_previous_slice(e,t,s,l,r,i,o,n,f,c){let x=0;if(!r)return 0;const u=e[this.idx(s,l,r,i)];if(o>=6){const h=this.idx(s,l,r-1,i);u===e[h]&&(f[x++]=t[h])}if(o>=18){if(s){const h=this.idx(s-1,l,r-1,i);u===e[h]&&(f[x++]=t[h])}if(l){const h=this.idx(s,l-1,r-1,i);u===e[h]&&(f[x++]=t[h])}if(s<i[0]-1){const h=this.idx(s+1,l,r-1,i);u===e[h]&&(f[x++]=t[h])}if(l<i[1]-1){const h=this.idx(s,l+1,r-1,i);u===e[h]&&(f[x++]=t[h])}}if(o===26){if(s&&l){const h=this.idx(s-1,l-1,r-1,i);u===e[h]&&(f[x++]=t[h])}if(s<i[0]-1&&l){const h=this.idx(s+1,l-1,r-1,i);u===e[h]&&(f[x++]=t[h])}if(s&&l<i[1]-1){const h=this.idx(s-1,l+1,r-1,i);u===e[h]&&(f[x++]=t[h])}if(s<i[0]-1&&l<i[1]-1){const h=this.idx(s+1,l+1,r-1,i);u===e[h]&&(f[x++]=t[h])}}return x?(this.fill_tratab(n,f,x,c),f[0]):0}do_initial_labelling(e,t,s){const l=new Uint32Array(32),r=new Uint32Array(32);let i=1;const o=8192;let n=o,f=new Uint32Array(n).fill(0);const c=new Uint32Array(t[0]*t[1]*t[2]).fill(0),x=new Uint32Array(27);for(let u=0;u<t[2];u++)for(let h=0;h<t[1];h++)for(let g=0;g<t[0];g++){let y=0;const d=e[this.idx(g,h,u,t)];if(d!==0){if(x[0]=this.check_previous_slice(e,c,g,h,u,t,s,f,l,r),x[0]&&(y+=1),s>=6){if(g){const v=this.idx(g-1,h,u,t);d===e[v]&&(x[y++]=c[v])}if(h){const v=this.idx(g,h-1,u,t);d===e[v]&&(x[y++]=c[v])}}if(s>=18){if(h&&g){const v=this.idx(g-1,h-1,u,t);d===e[v]&&(x[y++]=c[v])}if(h&&g<t[0]-1){const v=this.idx(g+1,h-1,u,t);d===e[v]&&(x[y++]=c[v])}}if(y)c[this.idx(g,h,u,t)]=x[0],this.fill_tratab(f,x,y,r);else{if(c[this.idx(g,h,u,t)]=i,i>=n){n+=o;const v=new Uint32Array(n);v.set(f),f=v}f[i-1]=i,i++}}}for(let u=0;u<i-1;u++){let h=u;for(;f[h]!==h+1;)h=f[h]-1;f[u]=h+1}return[i-1,f,c]}fill_tratab(e,t,s,l){let i=2147483647;for(let o=0;o<s;o++){let n=t[o];for(;e[n-1]!==n;)n=e[n-1];l[o]=n,i=Math.min(i,n)}for(let o=0;o<s;o++)e[l[o]-1]=i}translate_labels(e,t,s,l){const r=t[0]*t[1]*t[2];let i=0;const o=new Uint32Array(r).fill(0);for(let c=0;c<l;c++)i=Math.max(i,s[c]);const n=new Uint32Array(i).fill(0);let f=0;for(let c=0;c<r;c++)e[c]&&(n[s[e[c]-1]-1]||(f+=1,n[s[e[c]-1]-1]=f),o[c]=n[s[e[c]-1]-1]);return[f,o]}largest_original_cluster_labels(e,t,s){const l=e.length,r=new Uint32Array(t+1).fill(0),i=new Uint32Array(t+1).fill(0);for(let f=0;f<l;f++){const c=e[f],x=s[f];r[x]=c,i[x]++}let o=0;for(let f=0;f<t+1;f++){const c=r[f];o=Math.max(o,c);for(let x=0;x<t+1;x++)x!==f&&c===r[x]&&(i[f]<i[x]||i[f]===i[x]&&f<x)&&(r[f]=0)}const n=new Uint32Array(l).fill(0);for(let f=0;f<l;f++)n[f]=r[s[f]];return[o,n]}bwlabel(e,t,s=26,l=!1,r=!1){const i=Date.now(),o=t[0]*t[1]*t[2],n=new Uint32Array(o).fill(0);if(![6,18,26].includes(s))return console.log("bwlabel: conn must be 6, 18 or 26."),[0,n];if(t[0]<2||t[1]<2||t[2]<1)return console.log("bwlabel: img must be 2 or 3-dimensional"),[0,n];if(l)for(let g=0;g<o;g++)e[g]!==0&&(n[g]=1);else n.set(e);let[f,c,x]=this.do_initial_labelling(n,t,s);c===void 0&&(c=new Uint32Array(0));const[u,h]=this.translate_labels(x,t,c,f);if(console.log(s+" neighbor clustering into "+u+" regions in "+(Date.now()-i)+"ms"),r){const[g,y]=this.largest_original_cluster_labels(n,u,h);return[g,y]}return[u,h]}}const U=[[-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,8,3,-1,0,0,0,0,0,0,0,0,0,0,0,0],[1,9,0,-1,0,0,0,0,0,0,0,0,0,0,0,0],[8,1,9,8,3,1,-1,0,0,0,0,0,0,0,0,0],[2,10,1,-1,0,0,0,0,0,0,0,0,0,0,0,0],[0,8,3,1,2,10,-1,0,0,0,0,0,0,0,0,0],[9,2,10,9,0,2,-1,0,0,0,0,0,0,0,0,0],[3,2,10,3,10,8,8,10,9,-1,0,0,0,0,0,0],[2,3,11,-1,0,0,0,0,0,0,0,0,0,0,0,0],[11,0,8,11,2,0,-1,0,0,0,0,0,0,0,0,0],[1,9,0,2,3,11,-1,0,0,0,0,0,0,0,0,0],[2,1,9,2,9,11,11,9,8,-1,0,0,0,0,0,0],[3,10,1,3,11,10,-1,0,0,0,0,0,0,0,0,0],[1,0,8,1,8,10,10,8,11,-1,0,0,0,0,0,0],[0,3,11,0,11,9,9,11,10,-1,0,0,0,0,0,0],[11,10,9,11,9,8,-1,0,0,0,0,0,0,0,0,0],[4,7,8,-1,0,0,0,0,0,0,0,0,0,0,0,0],[4,3,0,4,7,3,-1,0,0,0,0,0,0,0,0,0],[4,7,8,9,0,1,-1,0,0,0,0,0,0,0,0,0],[9,4,7,9,7,1,1,7,3,-1,0,0,0,0,0,0],[4,7,8,1,2,10,-1,0,0,0,0,0,0,0,0,0],[4,3,0,4,7,3,2,10,1,-1,0,0,0,0,0,0],[2,9,0,2,10,9,4,7,8,-1,0,0,0,0,0,0],[3,2,7,7,9,4,7,2,9,9,2,10,-1,0,0,0],[8,4,7,3,11,2,-1,0,0,0,0,0,0,0,0,0],[7,11,2,7,2,4,4,2,0,-1,0,0,0,0,0,0],[2,3,11,1,9,0,8,4,7,-1,0,0,0,0,0,0],[2,1,9,2,9,4,2,4,11,11,4,7,-1,0,0,0],[10,3,11,10,1,3,8,4,7,-1,0,0,0,0,0,0],[4,7,0,0,10,1,7,10,0,7,11,10,-1,0,0,0],[8,4,7,0,3,11,0,11,9,9,11,10,-1,0,0,0],[7,9,4,7,11,9,9,11,10,-1,0,0,0,0,0,0],[4,9,5,-1,0,0,0,0,0,0,0,0,0,0,0,0],[8,3,0,4,9,5,-1,0,0,0,0,0,0,0,0,0],[0,5,4,0,1,5,-1,0,0,0,0,0,0,0,0,0],[4,8,3,4,3,5,5,3,1,-1,0,0,0,0,0,0],[1,2,10,9,5,4,-1,0,0,0,0,0,0,0,0,0],[4,9,5,8,3,0,1,2,10,-1,0,0,0,0,0,0],[10,5,4,10,4,2,2,4,0,-1,0,0,0,0,0,0],[4,8,3,4,3,2,4,2,5,5,2,10,-1,0,0,0],[2,3,11,5,4,9,-1,0,0,0,0,0,0,0,0,0],[11,0,8,11,2,0,9,5,4,-1,0,0,0,0,0,0],[5,0,1,5,4,0,3,11,2,-1,0,0,0,0,0,0],[11,2,8,8,5,4,2,5,8,2,1,5,-1,0,0,0],[3,10,1,3,11,10,5,4,9,-1,0,0,0,0,0,0],[9,5,4,1,0,8,1,8,10,10,8,11,-1,0,0,0],[10,5,11,11,0,3,11,5,0,0,5,4,-1,0,0,0],[4,10,5,4,8,10,10,8,11,-1,0,0,0,0,0,0],[7,9,5,7,8,9,-1,0,0,0,0,0,0,0,0,0],[0,9,5,0,5,3,3,5,7,-1,0,0,0,0,0,0],[8,0,1,8,1,7,7,1,5,-1,0,0,0,0,0,0],[3,1,5,3,5,7,-1,0,0,0,0,0,0,0,0,0],[7,9,5,7,8,9,1,2,10,-1,0,0,0,0,0,0],[1,2,10,0,9,5,0,5,3,3,5,7,-1,0,0,0],[7,8,5,5,2,10,8,2,5,8,0,2,-1,0,0,0],[10,3,2,10,5,3,3,5,7,-1,0,0,0,0,0,0],[9,7,8,9,5,7,11,2,3,-1,0,0,0,0,0,0],[0,9,2,2,7,11,2,9,7,7,9,5,-1,0,0,0],[3,11,2,8,0,1,8,1,7,7,1,5,-1,0,0,0],[2,7,11,2,1,7,7,1,5,-1,0,0,0,0,0,0],[11,1,3,11,10,1,7,8,9,7,9,5,-1,0,0,0],[11,10,1,11,1,7,7,1,0,7,0,9,7,9,5,-1],[5,7,8,5,8,10,10,8,0,10,0,3,10,3,11,-1],[11,10,5,11,5,7,-1,0,0,0,0,0,0,0,0,0],[10,6,5,-1,0,0,0,0,0,0,0,0,0,0,0,0],[0,8,3,10,6,5,-1,0,0,0,0,0,0,0,0,0],[9,0,1,5,10,6,-1,0,0,0,0,0,0,0,0,0],[8,1,9,8,3,1,10,6,5,-1,0,0,0,0,0,0],[6,1,2,6,5,1,-1,0,0,0,0,0,0,0,0,0],[6,1,2,6,5,1,0,8,3,-1,0,0,0,0,0,0],[5,9,0,5,0,6,6,0,2,-1,0,0,0,0,0,0],[6,5,2,2,8,3,5,8,2,5,9,8,-1,0,0,0],[2,3,11,10,6,5,-1,0,0,0,0,0,0,0,0,0],[0,11,2,0,8,11,6,5,10,-1,0,0,0,0,0,0],[0,1,9,3,11,2,10,6,5,-1,0,0,0,0,0,0],[10,6,5,2,1,9,2,9,11,11,9,8,-1,0,0,0],[11,6,5,11,5,3,3,5,1,-1,0,0,0,0,0,0],[11,6,8,8,1,0,8,6,1,1,6,5,-1,0,0,0],[0,3,11,0,11,6,0,6,9,9,6,5,-1,0,0,0],[5,11,6,5,9,11,11,9,8,-1,0,0,0,0,0,0],[7,8,4,6,5,10,-1,0,0,0,0,0,0,0,0,0],[3,4,7,3,0,4,5,10,6,-1,0,0,0,0,0,0],[6,5,10,7,8,4,9,0,1,-1,0,0,0,0,0,0],[5,10,6,9,4,7,9,7,1,1,7,3,-1,0,0,0],[1,6,5,1,2,6,7,8,4,-1,0,0,0,0,0,0],[7,0,4,7,3,0,6,5,1,6,1,2,-1,0,0,0],[4,7,8,5,9,0,5,0,6,6,0,2,-1,0,0,0],[2,6,5,2,5,3,3,5,9,3,9,4,3,4,7,-1],[4,7,8,5,10,6,11,2,3,-1,0,0,0,0,0,0],[6,5,10,7,11,2,7,2,4,4,2,0,-1,0,0,0],[4,7,8,9,0,1,6,5,10,3,11,2,-1,0,0,0],[6,5,10,11,4,7,11,2,4,4,2,9,9,2,1,-1],[7,8,4,11,6,5,11,5,3,3,5,1,-1,0,0,0],[0,4,7,0,7,1,1,7,11,1,11,6,1,6,5,-1],[4,7,8,9,6,5,9,0,6,6,0,11,11,0,3,-1],[7,11,4,11,9,4,11,5,9,11,6,5,-1,0,0,0],[10,4,9,10,6,4,-1,0,0,0,0,0,0,0,0,0],[10,4,9,10,6,4,8,3,0,-1,0,0,0,0,0,0],[1,10,6,1,6,0,0,6,4,-1,0,0,0,0,0,0],[4,8,6,6,1,10,6,8,1,1,8,3,-1,0,0,0],[9,1,2,9,2,4,4,2,6,-1,0,0,0,0,0,0],[0,8,3,9,1,2,9,2,4,4,2,6,-1,0,0,0],[0,2,6,0,6,4,-1,0,0,0,0,0,0,0,0,0],[3,4,8,3,2,4,4,2,6,-1,0,0,0,0,0,0],[4,10,6,4,9,10,2,3,11,-1,0,0,0,0,0,0],[8,2,0,8,11,2,4,9,10,4,10,6,-1,0,0,0],[2,3,11,1,10,6,1,6,0,0,6,4,-1,0,0,0],[8,11,2,8,2,4,4,2,1,4,1,10,4,10,6,-1],[3,11,1,1,4,9,11,4,1,11,6,4,-1,0,0,0],[6,4,9,6,9,11,11,9,1,11,1,0,11,0,8,-1],[11,0,3,11,6,0,0,6,4,-1,0,0,0,0,0,0],[8,11,6,8,6,4,-1,0,0,0,0,0,0,0,0,0],[6,7,8,6,8,10,10,8,9,-1,0,0,0,0,0,0],[3,0,7,7,10,6,0,10,7,0,9,10,-1,0,0,0],[1,10,6,1,6,7,1,7,0,0,7,8,-1,0,0,0],[6,1,10,6,7,1,1,7,3,-1,0,0,0,0,0,0],[9,1,8,8,6,7,8,1,6,6,1,2,-1,0,0,0],[7,3,0,7,0,6,6,0,9,6,9,1,6,1,2,-1],[8,6,7,8,0,6,6,0,2,-1,0,0,0,0,0,0],[2,6,7,2,7,3,-1,0,0,0,0,0,0,0,0,0],[11,2,3,6,7,8,6,8,10,10,8,9,-1,0,0,0],[9,10,6,9,6,0,0,6,7,0,7,11,0,11,2,-1],[3,11,2,0,7,8,0,1,7,7,1,6,6,1,10,-1],[6,7,10,7,1,10,7,2,1,7,11,2,-1,0,0,0],[1,3,11,1,11,9,9,11,6,9,6,7,9,7,8,-1],[6,7,11,9,1,0,-1,0,0,0,0,0,0,0,0,0],[8,0,7,0,6,7,0,11,6,0,3,11,-1,0,0,0],[6,7,11,-1,0,0,0,0,0,0,0,0,0,0,0,0],[6,11,7,-1,0,0,0,0,0,0,0,0,0,0,0,0],[3,0,8,11,7,6,-1,0,0,0,0,0,0,0,0,0],[6,11,7,9,0,1,-1,0,0,0,0,0,0,0,0,0],[1,8,3,1,9,8,7,6,11,-1,0,0,0,0,0,0],[11,7,6,2,10,1,-1,0,0,0,0,0,0,0,0,0],[1,2,10,0,8,3,11,7,6,-1,0,0,0,0,0,0],[9,2,10,9,0,2,11,7,6,-1,0,0,0,0,0,0],[11,7,6,3,2,10,3,10,8,8,10,9,-1,0,0,0],[2,7,6,2,3,7,-1,0,0,0,0,0,0,0,0,0],[8,7,6,8,6,0,0,6,2,-1,0,0,0,0,0,0],[7,2,3,7,6,2,1,9,0,-1,0,0,0,0,0,0],[8,7,9,9,2,1,9,7,2,2,7,6,-1,0,0,0],[6,10,1,6,1,7,7,1,3,-1,0,0,0,0,0,0],[6,10,1,6,1,0,6,0,7,7,0,8,-1,0,0,0],[7,6,3,3,9,0,6,9,3,6,10,9,-1,0,0,0],[6,8,7,6,10,8,8,10,9,-1,0,0,0,0,0,0],[8,6,11,8,4,6,-1,0,0,0,0,0,0,0,0,0],[11,3,0,11,0,6,6,0,4,-1,0,0,0,0,0,0],[6,8,4,6,11,8,0,1,9,-1,0,0,0,0,0,0],[1,9,3,3,6,11,9,6,3,9,4,6,-1,0,0,0],[8,6,11,8,4,6,10,1,2,-1,0,0,0,0,0,0],[2,10,1,11,3,0,11,0,6,6,0,4,-1,0,0,0],[11,4,6,11,8,4,2,10,9,2,9,0,-1,0,0,0],[4,6,11,4,11,9,9,11,3,9,3,2,9,2,10,-1],[3,8,4,3,4,2,2,4,6,-1,0,0,0,0,0,0],[2,0,4,2,4,6,-1,0,0,0,0,0,0,0,0,0],[0,1,9,3,8,4,3,4,2,2,4,6,-1,0,0,0],[9,2,1,9,4,2,2,4,6,-1,0,0,0,0,0,0],[6,10,4,4,3,8,4,10,3,3,10,1,-1,0,0,0],[1,6,10,1,0,6,6,0,4,-1,0,0,0,0,0,0],[10,9,0,10,0,6,6,0,3,6,3,8,6,8,4,-1],[10,9,4,10,4,6,-1,0,0,0,0,0,0,0,0,0],[6,11,7,5,4,9,-1,0,0,0,0,0,0,0,0,0],[0,8,3,9,5,4,7,6,11,-1,0,0,0,0,0,0],[0,5,4,0,1,5,6,11,7,-1,0,0,0,0,0,0],[7,6,11,4,8,3,4,3,5,5,3,1,-1,0,0,0],[2,10,1,11,7,6,5,4,9,-1,0,0,0,0,0,0],[0,8,3,1,2,10,4,9,5,11,7,6,-1,0,0,0],[6,11,7,10,5,4,10,4,2,2,4,0,-1,0,0,0],[6,11,7,5,2,10,5,4,2,2,4,3,3,4,8,-1],[2,7,6,2,3,7,4,9,5,-1,0,0,0,0,0,0],[4,9,5,8,7,6,8,6,0,0,6,2,-1,0,0,0],[3,6,2,3,7,6,0,1,5,0,5,4,-1,0,0,0],[1,5,4,1,4,2,2,4,8,2,8,7,2,7,6,-1],[5,4,9,6,10,1,6,1,7,7,1,3,-1,0,0,0],[4,9,5,7,0,8,7,6,0,0,6,1,1,6,10,-1],[3,7,6,3,6,0,0,6,10,0,10,5,0,5,4,-1],[4,8,5,8,10,5,8,6,10,8,7,6,-1,0,0,0],[5,6,11,5,11,9,9,11,8,-1,0,0,0,0,0,0],[0,9,5,0,5,6,0,6,3,3,6,11,-1,0,0,0],[8,0,11,11,5,6,11,0,5,5,0,1,-1,0,0,0],[11,5,6,11,3,5,5,3,1,-1,0,0,0,0,0,0],[10,1,2,5,6,11,5,11,9,9,11,8,-1,0,0,0],[2,10,1,3,6,11,3,0,6,6,0,5,5,0,9,-1],[0,2,10,0,10,8,8,10,5,8,5,6,8,6,11,-1],[11,3,6,3,5,6,3,10,5,3,2,10,-1,0,0,0],[2,3,6,6,9,5,3,9,6,3,8,9,-1,0,0,0],[5,0,9,5,6,0,0,6,2,-1,0,0,0,0,0,0],[6,2,3,6,3,5,5,3,8,5,8,0,5,0,1,-1],[6,2,1,6,1,5,-1,0,0,0,0,0,0,0,0,0],[8,9,5,8,5,3,3,5,6,3,6,10,3,10,1,-1],[1,0,10,0,6,10,0,5,6,0,9,5,-1,0,0,0],[0,3,8,10,5,6,-1,0,0,0,0,0,0,0,0,0],[10,5,6,-1,0,0,0,0,0,0,0,0,0,0,0,0],[11,5,10,11,7,5,-1,0,0,0,0,0,0,0,0,0],[5,11,7,5,10,11,3,0,8,-1,0,0,0,0,0,0],[11,5,10,11,7,5,9,0,1,-1,0,0,0,0,0,0],[9,3,1,9,8,3,5,10,11,5,11,7,-1,0,0,0],[2,11,7,2,7,1,1,7,5,-1,0,0,0,0,0,0],[3,0,8,2,11,7,2,7,1,1,7,5,-1,0,0,0],[2,11,0,0,5,9,0,11,5,5,11,7,-1,0,0,0],[9,8,3,9,3,5,5,3,2,5,2,11,5,11,7,-1],[10,2,3,10,3,5,5,3,7,-1,0,0,0,0,0,0],[5,10,7,7,0,8,10,0,7,10,2,0,-1,0,0,0],[1,9,0,10,2,3,10,3,5,5,3,7,-1,0,0,0],[7,5,10,7,10,8,8,10,2,8,2,1,8,1,9,-1],[7,5,1,7,1,3,-1,0,0,0,0,0,0,0,0,0],[8,1,0,8,7,1,1,7,5,-1,0,0,0,0,0,0],[0,5,9,0,3,5,5,3,7,-1,0,0,0,0,0,0],[7,5,9,7,9,8,-1,0,0,0,0,0,0,0,0,0],[4,5,10,4,10,8,8,10,11,-1,0,0,0,0,0,0],[11,3,10,10,4,5,10,3,4,4,3,0,-1,0,0,0],[9,0,1,4,5,10,4,10,8,8,10,11,-1,0,0,0],[3,1,9,3,9,11,11,9,4,11,4,5,11,5,10,-1],[8,4,11,11,1,2,4,1,11,4,5,1,-1,0,0,0],[5,1,2,5,2,4,4,2,11,4,11,3,4,3,0,-1],[11,8,4,11,4,2,2,4,5,2,5,9,2,9,0,-1],[2,11,3,5,9,4,-1,0,0,0,0,0,0,0,0,0],[4,5,10,4,10,2,4,2,8,8,2,3,-1,0,0,0],[10,4,5,10,2,4,4,2,0,-1,0,0,0,0,0,0],[0,1,9,8,2,3,8,4,2,2,4,10,10,4,5,-1],[10,2,5,2,4,5,2,9,4,2,1,9,-1,0,0,0],[4,3,8,4,5,3,3,5,1,-1,0,0,0,0,0,0],[0,4,5,0,5,1,-1,0,0,0,0,0,0,0,0,0],[0,3,9,3,5,9,3,4,5,3,8,4,-1,0,0,0],[4,5,9,-1,0,0,0,0,0,0,0,0,0,0,0,0],[7,4,9,7,9,11,11,9,10,-1,0,0,0,0,0,0],[8,3,0,7,4,9,7,9,11,11,9,10,-1,0,0,0],[0,1,4,4,11,7,1,11,4,1,10,11,-1,0,0,0],[10,11,7,10,7,1,1,7,4,1,4,8,1,8,3,-1],[2,11,7,2,7,4,2,4,1,1,4,9,-1,0,0,0],[0,8,3,1,4,9,1,2,4,4,2,7,7,2,11,-1],[7,2,11,7,4,2,2,4,0,-1,0,0,0,0,0,0],[7,4,11,4,2,11,4,3,2,4,8,3,-1,0,0,0],[7,4,3,3,10,2,3,4,10,10,4,9,-1,0,0,0],[2,0,8,2,8,10,10,8,7,10,7,4,10,4,9,-1],[4,0,1,4,1,7,7,1,10,7,10,2,7,2,3,-1],[4,8,7,1,10,2,-1,0,0,0,0,0,0,0,0,0],[9,7,4,9,1,7,7,1,3,-1,0,0,0,0,0,0],[8,7,0,7,1,0,7,9,1,7,4,9,-1,0,0,0],[4,0,3,4,3,7,-1,0,0,0,0,0,0,0,0,0],[4,8,7,-1,0,0,0,0,0,0,0,0,0,0,0,0],[8,9,10,8,10,11,-1,0,0,0,0,0,0,0,0,0],[0,11,3,0,9,11,11,9,10,-1,0,0,0,0,0,0],[1,8,0,1,10,8,8,10,11,-1,0,0,0,0,0,0],[3,1,10,3,10,11,-1,0,0,0,0,0,0,0,0,0],[2,9,1,2,11,9,9,11,8,-1,0,0,0,0,0,0],[0,9,3,9,11,3,9,2,11,9,1,2,-1,0,0,0],[11,8,0,11,0,2,-1,0,0,0,0,0,0,0,0,0],[2,11,3,-1,0,0,0,0,0,0,0,0,0,0,0,0],[3,10,2,3,8,10,10,8,9,-1,0,0,0,0,0,0],[9,10,2,9,2,0,-1,0,0,0,0,0,0,0,0,0],[3,8,2,8,10,2,8,1,10,8,0,1,-1,0,0,0],[2,1,10,-1,0,0,0,0,0,0,0,0,0,0,0,0],[8,9,1,8,1,3,-1,0,0,0,0,0,0,0,0,0],[1,0,9,-1,0,0,0,0,0,0,0,0,0,0,0,0],[0,3,8,-1,0,0,0,0,0,0,0,0,0,0,0,0],[-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]],j=[[0,1],[1,2],[2,3],[3,0],[4,5],[6,5],[6,7],[7,4],[0,4],[1,5],[2,6],[3,7]],E=[[0,0,0],[1,0,0],[1,1,0],[0,1,0],[0,0,1],[1,0,1],[1,1,1],[0,1,1]],V=function(a,e,t,s){for(let l=0;l<E.length;++l){const r=E[l],i=((t[2]+r[2])*e[1]+t[1]+r[1])*e[0]+t[0]+r[0];s[l]=a[i]}},k=function(a,e,t,s,l,r){let i=0;Math.abs(t-s)<1e-4?i=0:i=(l-t)/(s-t),r[0]=a[0]+i*(e[0]-a[0]),r[1]=a[1]+i*(e[1]-a[1]),r[2]=a[2]+i*(e[2]-a[2])};class I{constructor(e,t){this.len=0,this.capacity=e,t==="uint8"?this.buffer=new Uint8Array(e):t==="int8"?this.buffer=new Int8Array(e):t==="uint16"?this.buffer=new Uint16Array(e):t==="int16"?this.buffer=new Int16Array(e):t==="uint32"?this.buffer=new Uint32Array(e):t==="int32"?this.buffer=new Int32Array(e):t==="float32"?this.buffer=new Float32Array(e):t==="float64"?this.buffer=new Float64Array(e):console.log("ERROR: unsupported type "+t)}append(e){if(this.len+e.length>=this.capacity){const t=Math.floor(this.capacity*1.5),s=new this.buffer.constructor(t);s.set(this.buffer),this.capacity=t,this.buffer=s}this.buffer.set(e,this.len),this.len+=e.length}clear(){this.len=0}stride(){return this.buffer.BYTES_PER_ELEMENT}view(e,t){return new this.buffer.constructor(this.buffer.buffer,e,t)}}function _(a,e,t){const s=new I(3,"float32");s.clear();const l=[0,0,0,0,0,0,0,0],r=[0,0,0];for(let i=0;i<e[2]-1;++i)for(let o=0;o<e[1]-1;++o)for(let n=0;n<e[0]-1;++n){V(a,e,[n,o,i],l);let f=0;for(let c=0;c<8;++c)l[c]<=t&&(f|=1<<c);for(let c=0;U[f][c]!==-1;++c){const x=j[U[f][c]][0],u=j[U[f][c]][1];k(E[x],E[u],l[x],l[u],t,r),r[0]+=n+.5,r[1]+=o+.5,r[2]+=i+.5,s.append(r)}}return s.view(0,s.len)}function N(a,e,t=!1){const s=a.length/3,l=[a[0],a[1],a[2]],r=[];let i=0;for(let u=0;u<a.length;u+=3){const h=[a[u],a[u+1],a[u+2]],g=i++,y=-1,d=Math.sqrt(Math.pow(h[0]-l[0],2)+Math.pow(h[1]-l[1],2)+Math.pow(h[2]-l[2],2));r.push({inIndex:g,distance:d,xyz:h,outIndex:y})}r.sort((u,h)=>u.distance-h.distance);const o=1e-5;let n=0;const f=new Int32Array(s).fill(-1),c=new Int32Array(s).fill(-1);for(let u=0;u<s;u++){const h=r[u];if(h.outIndex>=0)continue;let g=u;for(;g<s&&r[g].distance-h.distance<o;)Math.sqrt(Math.pow(h.xyz[0]-r[g].xyz[0],2)+Math.pow(h.xyz[1]-r[g].xyz[1],2)+Math.pow(h.xyz[2]-r[g].xyz[2],2))<o&&(r[g].outIndex=n,c[r[g].inIndex]=n),g++;f[n]=u,n++}if(s===n)return t&&console.log("Unify vertices found no shared vertices"),{vertices:a,triangles:e};const x=new Float32Array(n*3);i=0;for(let u=0;u<n;u++){const h=f[u];x[i++]=r[h].xyz[0],x[i++]=r[h].xyz[1],x[i++]=r[h].xyz[2]}for(let u=0;u<e.length;u++)e[u]=c[e[u]];return t&&console.log(`Vertex welding ${s} -> ${n}`),{vertices:x,triangles:e}}function S(a,e){for(let t=0;t<a.length;t+=3){const s=[a[t],a[t+1],a[t+2]];s[0]-=.5,s[1]-=.5,s[2]-=.5,a[t+0]=s[0]*e[0][0]+s[1]*e[0][1]+s[2]*e[0][2]+e[0][3],a[t+1]=s[0]*e[1][0]+s[1]*e[1][1]+s[2]*e[1][2]+e[1][3],a[t+2]=s[0]*e[2][0]+s[1]*e[2][1]+s[2]*e[2][2]+e[2][3]}return a}function T(a,e=!0){let t=a;const s=t.length/3;let l=0;for(let i=0;i<t.length;i+=3)t[i]===t[i+1]||t[i]===t[i+2]||t[i+1]===t[i+2]||l++;if(l===s)return a;if(l===0)throw new Error("invalid mesh: no valid triangles");e&&console.log(`${s-l} of the ${s} triangles are degenerate`),t=a.slice(),a=new Uint32Array(l*3);let r=0;for(let i=0;i<t.length;i+=3)t[i]===t[i+1]||t[i]===t[i+2]||t[i+1]===t[i+2]||(a[r++]=t[i],a[r++]=t[i+1],a[r++]=t[i+2]);return a}function $(a,e,t=!0){const s=e[0],l=e[1],r=e[2];if(s<3||l<3||r<3)return;const i=s*l*r;let o=6;t&&(o=26);const n=new Int32Array(o);if(t){let g=0;for(let y=-1;y<=1;y++)for(let d=-1;d<=1;d++)for(let v=-1;v<=1;v++)v===0&&d===0&&y===0||(n[g]=v+d*s+y*s*l,g++)}else n[0]=s*l,n[1]=-n[0],n[2]=s,n[3]=-n[2],n[4]=1,n[5]=-1;const f=new Int32Array(i),c=new Uint8Array(i);for(let g=0;g<i;g++)c[g]=a[g]>0?1:0;let x=0,u=-1,h=0;for(let g=0;g<r;g++){const y=g===0||g===r-1?1:0;for(let d=0;d<l;d++){const v=d===0||d===l-1?1:0;for(let w=0;w<s;w++)c[h]===0&&(y||v||w===0||w===s-1)&&(c[h]=1,u++,f[u]=h),h++}}for(;u>=x;){for(let g=0;g<o;g++){const y=f[x]+n[g];y<0||y>=i||c[y]===0&&(c[y]=1,u++,f[u]=y)}x++}for(let g=0;g<i;g++)c[g]===0&&(a[g]=1);return a}function O(a,e,t=1){let s=a.map(o=>o>=t?1:0);const l=s.reduce((o,n)=>o+(n!==0?1:0),0);s=$(s,e);const r=s.reduce((o,n)=>o+(n!==0?1:0),0);if(l===r)return a;console.log(`${r-l} voxels were bubbles`);const i=t+1;for(let o=0;o<a.length;o++)s[o]!==0&&(a[o]=Math.max(a[o],i));return a}function D(a,e,t=1){const s=new C,l=26,r=!0,i=!0,o=a.slice().fill(0);for(let c=0;c<a.length;c++)a[c]>=t&&(o[c]=1);const[n,f]=s.bwlabel(o,e,l,r,i);for(let c=0;c<a.length;c++)a[c]*=f[c];return a}function q(a,e){const[t,s,l]=e,r=t*s;let i=t-1;for(let o=0;o<l;o++){const n=o*r;for(let f=0;f<s;f++){const c=f*t;a[n+c]=0,a[n+c+i]=0}}i=(s-1)*t;for(let o=0;o<l;o++){const n=o*r;for(let f=0;f<t;f++)a[n+f]=0,a[n+f+i]=0}i=(l-1)*r;for(let o=0;o<r;o++)a[o]=0,a[o+i]=0;return a}function L(a,e,t,s=!1,l=!1,r=[],i=!0){if(!(a instanceof Uint8Array)&&!(a instanceof Uint8ClampedArray))throw new Error("img must be a Uint8Array");if(t<0||t>255)throw new Error("isovalue must be in the range 0..255");if(e[0]<3||e[1]<3||e[2]<3)throw new Error("volume too small for meshification");a=q(a,e),s&&(a=D(a,e,t)),l&&(a=O(a,e,t));let o=[];if(o.vertices=_(a,e,t),o.vertices.length<3)throw new Error("No voxels survive isovalue threshold");const n=o.vertices.length/(3*3);o.triangles=new Uint32Array(n*3);for(let f=0;f<o.triangles.length;f++)o.triangles[f]=f;return o=N(o.vertices,o.triangles,i),i&&console.log(`Vertices ${o.vertices.length/3} Triangles ${o.triangles.length/3}`),o.triangles=T(o.triangles,i),r.length===4&&(o.vertices=S(o.vertices,r)),{vertices:o.vertices,triangles:o.triangles}}class R{constructor(e,t,s,l=7,r=!1,i=!0){this.vertices=[],this.triangles=[],this.refs=[],this.targetCount=s,this.aggressiveness=l,this.finishLossless=r,this.verbose=i,this.init(e,t)}init(e,t){for(let s=0;s<e.length;s+=3)this.vertices.push({p:{x:e[s],y:e[s+1],z:e[s+2]},tstart:0,tcount:0,q:Array(10).fill(0),border:0});for(let s=0;s<t.length;s+=3)this.triangles.push({v:[t[s],t[s+1],t[s+2]],err:Array(4).fill(0),dirty:!1,deleted:!1,n:{x:0,y:0,z:0}})}symMat1(e,t){for(let s=0;s<10;s++)e[s]=t}symMat4(e,t,s,l,r){e[0]=t*t,e[1]=t*s,e[2]=t*l,e[3]=t*r,e[4]=s*s,e[5]=s*l,e[6]=s*r,e[7]=l*l,e[8]=l*r,e[9]=r*r}symMat10(e,t,s,l,r,i,o,n,f,c,x){e[0]=t,e[1]=s,e[2]=l,e[3]=r,e[4]=i,e[5]=o,e[6]=n,e[7]=f,e[8]=c,e[9]=x}symMatAdd(e,t,s){this.symMat10(e,t[0]+s[0],t[1]+s[1],t[2]+s[2],t[3]+s[3],t[4]+s[4],t[5]+s[5],t[6]+s[6],t[7]+s[7],t[8]+s[8],t[9]+s[9])}symMatDet(e,t,s,l,r,i,o,n,f,c){return e[t]*e[i]*e[c]+e[l]*e[r]*e[f]+e[s]*e[o]*e[n]-e[l]*e[i]*e[n]-e[t]*e[o]*e[f]-e[s]*e[r]*e[c]}ptf(e,t,s){return{x:e,y:t,z:s}}vCross(e,t){return this.ptf(e.y*t.z-e.z*t.y,e.z*t.x-e.x*t.z,e.x*t.y-e.y*t.x)}vSum(e,t){return this.ptf(e.x+t.x,e.y+t.y,e.z+t.z)}vSubtract(e,t){return this.ptf(e.x-t.x,e.y-t.y,e.z-t.z)}vNormalize(e){let t=Math.sqrt(e.x*e.x+e.y*e.y+e.z*e.z);t<=0&&(t=.001),e.x/=t,e.y/=t,e.z/=t}vDot(e,t){return e.x*t.x+e.y*t.y+e.z*t.z}vMult(e,t){return this.ptf(e.x*t,e.y*t,e.z*t)}vertexError(e,t,s,l){return e[0]*t*t+2*e[1]*t*s+2*e[2]*t*l+2*e[3]*t+e[4]*s*s+2*e[5]*s*l+2*e[6]*s+e[7]*l*l+2*e[8]*l+e[9]}calculateError(e,t,s){const l=Array(10).fill(0);this.symMatAdd(l,this.vertices[e].q,this.vertices[t].q);const r=this.vertices[e].border+this.vertices[t].border,i=this.symMatDet(l,0,1,2,1,4,5,2,5,7);if(i!==0&&r===0)return s.x=-1/i*this.symMatDet(l,1,2,3,4,5,6,5,7,8),s.y=1/i*this.symMatDet(l,0,2,3,1,5,6,2,7,8),s.z=-1/i*this.symMatDet(l,0,1,3,1,4,6,2,5,8),this.vertexError(l,s.x,s.y,s.z);const o=this.vertices[e].p,n=this.vertices[t].p,f=this.vMult(this.vSum(o,n),.5),c=this.vertexError(l,o.x,o.y,o.z),x=this.vertexError(l,n.x,n.y,n.z),u=this.vertexError(l,f.x,f.y,f.z),h=Math.min(c,Math.min(x,u));return c===h&&Object.assign(s,o),x===h&&Object.assign(s,n),u===h&&Object.assign(s,f),h}updateMesh(e){if(e>0){let r=0;for(let i=0;i<this.triangles.length;i++)this.triangles[i].deleted||(this.triangles[r]=this.triangles[i],r++);this.triangles.length=r}for(const r of this.vertices)r.tstart=0,r.tcount=0;for(let r=0;r<this.triangles.length;r++)for(let i=0;i<3;i++)this.vertices[this.triangles[r].v[i]].tcount++;let t=0;for(const r of this.vertices)r.tstart=t,t+=r.tcount,r.tcount=0;this.refs.length=this.triangles.length*3;for(let r=0;r<this.triangles.length;r++){const i=this.triangles[r];for(let o=0;o<3;o++){const n=this.vertices[i.v[o]];this.refs[n.tstart+n.tcount]={tid:r,tvertex:o},n.tcount++}}if(e!==0)return;for(const r of this.vertices)r.border=0;const s=new Array(this.vertices.length).fill(0),l=new Array(this.vertices.length).fill(0);for(let r=0;r<this.vertices.length;r++){let i=0;const o=this.vertices[r];for(let n=0;n<o.tcount;n++){const f=this.refs[o.tstart+n].tid,c=this.triangles[f];for(let x=0;x<3;x++){const u=c.v[x];let h=0;for(;h<i&&s[h]!==u;)h++;h===i?(l[i]=1,s[i]=u,i++):l[h]++}}for(let n=0;n<i;n++)l[n]===1&&(this.vertices[s[n]].border=1)}for(const r of this.vertices)this.symMat1(r.q,0);for(let r=0;r<this.triangles.length;r++){const i=this.triangles[r],o=[];for(let f=0;f<3;f++)o[f]=this.vertices[i.v[f]].p;const n=this.vCross(this.vSubtract(o[1],o[0]),this.vSubtract(o[2],o[0]));this.vNormalize(n),i.n=n;for(let f=0;f<3;f++){const c=Array(10).fill(0);this.symMat4(c,n.x,n.y,n.z,-this.vDot(n,o[0])),this.symMatAdd(this.vertices[i.v[f]].q,this.vertices[i.v[f]].q,c)}}for(let r=0;r<this.triangles.length;r++){const i=this.triangles[r],o={};for(let n=0;n<3;n++)i.err[n]=this.calculateError(i.v[n],i.v[(n+1)%3],o);i.err[3]=Math.min(i.err[0],Math.min(i.err[1],i.err[2]))}}compactMesh(){let e=0;for(const t of this.vertices)t.tcount=0;for(let t=0;t<this.triangles.length;t++)if(!this.triangles[t].deleted){this.triangles[e++]=this.triangles[t];for(let s=0;s<3;s++)this.vertices[this.triangles[t].v[s]].tcount=1}this.triangles.length=e,e=0;for(let t=0;t<this.vertices.length;t++)this.vertices[t].tcount&&(this.vertices[t].tstart=e,this.vertices[e].p=this.vertices[t].p,e++);for(let t=0;t<this.triangles.length;t++){const s=this.triangles[t];for(let l=0;l<3;l++)s.v[l]=this.vertices[s.v[l]].tstart}this.vertices.length=e}updateTriangles(e,t,s,l){const r={};for(let i=0;i<t.tcount;i++){const o=this.refs[t.tstart+i],n=this.triangles[o.tid];if(!n.deleted){if(s[i]){n.deleted=!0,l++;continue}n.v[o.tvertex]=e,n.dirty=!0,n.err[0]=this.calculateError(n.v[0],n.v[1],r),n.err[1]=this.calculateError(n.v[1],n.v[2],r),n.err[2]=this.calculateError(n.v[2],n.v[0],r),n.err[3]=Math.min(n.err[0],Math.min(n.err[1],n.err[2])),this.refs.push(o)}}return l}flipped(e,t,s,l,r,i){for(let o=0;o<l.tcount;o++){const n=this.triangles[this.refs[l.tstart+o].tid];if(n.deleted)continue;const f=this.refs[l.tstart+o].tvertex,c=n.v[(f+1)%3],x=n.v[(f+2)%3];if(c===s||x===s){i[o]=!0;continue}const u=this.vSubtract(this.vertices[c].p,e);this.vNormalize(u);const h=this.vSubtract(this.vertices[x].p,e);if(this.vNormalize(h),Math.abs(this.vDot(u,h))>.999)return!0;const g=this.vCross(u,h);if(this.vNormalize(g),i[o]=!1,this.vDot(g,n.n)<.2)return!0}return!1}simplify(e=!0){let t=0;const s=this.triangles.length,l=new Array(s*3).fill(!1),r=new Array(s*3).fill(!1),i=s;let o=100,n=!0,f=Number.EPSILON;this.aggressiveness<=5&&(o=500),this.targetCount>=i&&(n=!1,o=1e3);let c=0;for(let h=0;h<o;h++){if(n&&s-t<=this.targetCount){if(!this.finishLossless)break;n=!1,f=Number.EPSILON,o=1e3}if(n)h%5===0&&this.updateMesh(h),f=1e-9*Math.pow(h+3,this.aggressiveness);else{if(c===s-t)break;this.updateMesh(h)}c=s-t;for(let g=0;g<this.triangles.length;g++)this.triangles[g].dirty=!1;e&&h%5===0&&console.log(`iteration ${h} - triangles ${s-t} threshold ${f}`);for(let g=0;g<this.triangles.length;g++){const y=this.triangles[g];if(!(y.err[3]>f)&&!y.deleted&&!y.dirty){for(let d=0;d<3;d++)if(y.err[d]<f){const v=y.v[d],w=this.vertices[v],A=y.v[(d+1)%3],p=this.vertices[A];if(w.border!==p.border)continue;const z={};if(this.calculateError(v,A,z),this.flipped(z,v,A,w,p,l)||this.flipped(z,A,v,p,w,r))continue;w.p=z,this.symMatAdd(w.q,p.q,w.q);const b=this.refs.length;t=this.updateTriangles(v,w,l,t),t=this.updateTriangles(v,p,r,t);const M=this.refs.length-b;M<=w.tcount?M&&this.refs.splice(w.tstart,M,...this.refs.slice(b,b+M)):w.tstart=b,w.tcount=M;break}if(n&&s-t<=this.targetCount)break}}}this.compactMesh();const x=[];for(const h of this.vertices)x.push(h.p.x,h.p.y,h.p.z);const u=[];for(const h of this.triangles)u.push(h.v[0],h.v[1],h.v[2]);if(e){const h=Math.round(100*(u.length/3)/s);console.log(`Vertices ${x.length/3} Triangles ${u.length/3} ${h}%`)}return{vertices:x,triangles:u}}}function P(a,e,t=.5,s=7,l=!0,r=!0){const i=Math.ceil(e.length/3*t);return new R(a,e,i,s,l,r).simplify()}self.onmessage=function(a){const{img:e,dims:t,isoValue:s,largestCheck:l,bubbleCheck:r,affine:i,shrinkValue:o}=a.data,n=new Uint8ClampedArray(e);let f=L(n,t,s,l,r,i);f=P(f.vertices,f.triangles,o),postMessage({vertices:f.vertices,triangles:f.triangles})};
