class k{idx(t,e,n,i){return n*i[0]*i[1]+e*i[0]+t}check_previous_slice(t,e,n,i,r,s,l,o,f,h){let g=0;if(!r)return 0;const a=t[this.idx(n,i,r,s)];if(l>=6){const u=this.idx(n,i,r-1,s);a===t[u]&&(f[g++]=e[u])}if(l>=18){if(n){const u=this.idx(n-1,i,r-1,s);a===t[u]&&(f[g++]=e[u])}if(i){const u=this.idx(n,i-1,r-1,s);a===t[u]&&(f[g++]=e[u])}if(n<s[0]-1){const u=this.idx(n+1,i,r-1,s);a===t[u]&&(f[g++]=e[u])}if(i<s[1]-1){const u=this.idx(n,i+1,r-1,s);a===t[u]&&(f[g++]=e[u])}}if(l===26){if(n&&i){const u=this.idx(n-1,i-1,r-1,s);a===t[u]&&(f[g++]=e[u])}if(n<s[0]-1&&i){const u=this.idx(n+1,i-1,r-1,s);a===t[u]&&(f[g++]=e[u])}if(n&&i<s[1]-1){const u=this.idx(n-1,i+1,r-1,s);a===t[u]&&(f[g++]=e[u])}if(n<s[0]-1&&i<s[1]-1){const u=this.idx(n+1,i+1,r-1,s);a===t[u]&&(f[g++]=e[u])}}return g?(this.fill_tratab(o,f,g,h),f[0]):0}do_initial_labelling(t,e,n){const i=new Uint32Array(32),r=new Uint32Array(32);let s=1;const l=8192;let o=l,f=new Uint32Array(o).fill(0);const h=new Uint32Array(e[0]*e[1]*e[2]).fill(0),g=new Uint32Array(27);for(let a=0;a<e[2];a++)for(let u=0;u<e[1];u++)for(let y=0;y<e[0];y++){let x=0;const w=t[this.idx(y,u,a,e)];if(w!==0){if(g[0]=this.check_previous_slice(t,h,y,u,a,e,n,f,i,r),g[0]&&(x+=1),n>=6){if(y){const v=this.idx(y-1,u,a,e);w===t[v]&&(g[x++]=h[v])}if(u){const v=this.idx(y,u-1,a,e);w===t[v]&&(g[x++]=h[v])}}if(n>=18){if(u&&y){const v=this.idx(y-1,u-1,a,e);w===t[v]&&(g[x++]=h[v])}if(u&&y<e[0]-1){const v=this.idx(y+1,u-1,a,e);w===t[v]&&(g[x++]=h[v])}}if(x)h[this.idx(y,u,a,e)]=g[0],this.fill_tratab(f,g,x,r);else{if(h[this.idx(y,u,a,e)]=s,s>=o){o+=l;const v=new Uint32Array(o);v.set(f),f=v}f[s-1]=s,s++}}}for(let a=0;a<s-1;a++){let u=a;for(;f[u]!==u+1;)u=f[u]-1;f[a]=u+1}return[s-1,f,h]}fill_tratab(t,e,n,i){let s=2147483647;for(let l=0;l<n;l++){let o=e[l];for(;t[o-1]!==o;)o=t[o-1];i[l]=o,s=Math.min(s,o)}for(let l=0;l<n;l++)t[i[l]-1]=s}translate_labels(t,e,n,i){const r=e[0]*e[1]*e[2];let s=0;const l=new Uint32Array(r).fill(0);for(let h=0;h<i;h++)s=Math.max(s,n[h]);const o=new Uint32Array(s).fill(0);let f=0;for(let h=0;h<r;h++)t[h]&&(o[n[t[h]-1]-1]||(f+=1,o[n[t[h]-1]-1]=f),l[h]=o[n[t[h]-1]-1]);return[f,l]}largest_original_cluster_labels(t,e,n){const i=t.length,r=new Uint32Array(e+1).fill(0),s=new Uint32Array(e+1).fill(0);for(let f=0;f<i;f++){const h=t[f],g=n[f];r[g]=h,s[g]++}let l=0;for(let f=0;f<e+1;f++){const h=r[f];l=Math.max(l,h);for(let g=0;g<e+1;g++)g!==f&&h===r[g]&&(s[f]<s[g]||s[f]===s[g]&&f<g)&&(r[f]=0)}const o=new Uint32Array(i).fill(0);for(let f=0;f<i;f++)o[f]=r[n[f]];return[l,o]}bwlabel(t,e,n=26,i=!1,r=!1){const s=Date.now(),l=e[0]*e[1]*e[2],o=new Uint32Array(l).fill(0);if(![6,18,26].includes(n))return console.log("bwlabel: conn must be 6, 18 or 26."),[0,o];if(e[0]<2||e[1]<2||e[2]<1)return console.log("bwlabel: img must be 2 or 3-dimensional"),[0,o];if(i)for(let y=0;y<l;y++)t[y]!==0&&(o[y]=1);else o.set(t);let[f,h,g]=this.do_initial_labelling(o,e,n);h===void 0&&(h=new Uint32Array(0));const[a,u]=this.translate_labels(g,e,h,f);if(console.log(n+" neighbor clustering into "+a+" regions in "+(Date.now()-s)+"ms"),r){const[y,x]=this.largest_original_cluster_labels(o,a,u);return[y,x]}return[a,u]}}const j=[[-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,8,3,-1,0,0,0,0,0,0,0,0,0,0,0,0],[1,9,0,-1,0,0,0,0,0,0,0,0,0,0,0,0],[8,1,9,8,3,1,-1,0,0,0,0,0,0,0,0,0],[2,10,1,-1,0,0,0,0,0,0,0,0,0,0,0,0],[0,8,3,1,2,10,-1,0,0,0,0,0,0,0,0,0],[9,2,10,9,0,2,-1,0,0,0,0,0,0,0,0,0],[3,2,10,3,10,8,8,10,9,-1,0,0,0,0,0,0],[2,3,11,-1,0,0,0,0,0,0,0,0,0,0,0,0],[11,0,8,11,2,0,-1,0,0,0,0,0,0,0,0,0],[1,9,0,2,3,11,-1,0,0,0,0,0,0,0,0,0],[2,1,9,2,9,11,11,9,8,-1,0,0,0,0,0,0],[3,10,1,3,11,10,-1,0,0,0,0,0,0,0,0,0],[1,0,8,1,8,10,10,8,11,-1,0,0,0,0,0,0],[0,3,11,0,11,9,9,11,10,-1,0,0,0,0,0,0],[11,10,9,11,9,8,-1,0,0,0,0,0,0,0,0,0],[4,7,8,-1,0,0,0,0,0,0,0,0,0,0,0,0],[4,3,0,4,7,3,-1,0,0,0,0,0,0,0,0,0],[4,7,8,9,0,1,-1,0,0,0,0,0,0,0,0,0],[9,4,7,9,7,1,1,7,3,-1,0,0,0,0,0,0],[4,7,8,1,2,10,-1,0,0,0,0,0,0,0,0,0],[4,3,0,4,7,3,2,10,1,-1,0,0,0,0,0,0],[2,9,0,2,10,9,4,7,8,-1,0,0,0,0,0,0],[3,2,7,7,9,4,7,2,9,9,2,10,-1,0,0,0],[8,4,7,3,11,2,-1,0,0,0,0,0,0,0,0,0],[7,11,2,7,2,4,4,2,0,-1,0,0,0,0,0,0],[2,3,11,1,9,0,8,4,7,-1,0,0,0,0,0,0],[2,1,9,2,9,4,2,4,11,11,4,7,-1,0,0,0],[10,3,11,10,1,3,8,4,7,-1,0,0,0,0,0,0],[4,7,0,0,10,1,7,10,0,7,11,10,-1,0,0,0],[8,4,7,0,3,11,0,11,9,9,11,10,-1,0,0,0],[7,9,4,7,11,9,9,11,10,-1,0,0,0,0,0,0],[4,9,5,-1,0,0,0,0,0,0,0,0,0,0,0,0],[8,3,0,4,9,5,-1,0,0,0,0,0,0,0,0,0],[0,5,4,0,1,5,-1,0,0,0,0,0,0,0,0,0],[4,8,3,4,3,5,5,3,1,-1,0,0,0,0,0,0],[1,2,10,9,5,4,-1,0,0,0,0,0,0,0,0,0],[4,9,5,8,3,0,1,2,10,-1,0,0,0,0,0,0],[10,5,4,10,4,2,2,4,0,-1,0,0,0,0,0,0],[4,8,3,4,3,2,4,2,5,5,2,10,-1,0,0,0],[2,3,11,5,4,9,-1,0,0,0,0,0,0,0,0,0],[11,0,8,11,2,0,9,5,4,-1,0,0,0,0,0,0],[5,0,1,5,4,0,3,11,2,-1,0,0,0,0,0,0],[11,2,8,8,5,4,2,5,8,2,1,5,-1,0,0,0],[3,10,1,3,11,10,5,4,9,-1,0,0,0,0,0,0],[9,5,4,1,0,8,1,8,10,10,8,11,-1,0,0,0],[10,5,11,11,0,3,11,5,0,0,5,4,-1,0,0,0],[4,10,5,4,8,10,10,8,11,-1,0,0,0,0,0,0],[7,9,5,7,8,9,-1,0,0,0,0,0,0,0,0,0],[0,9,5,0,5,3,3,5,7,-1,0,0,0,0,0,0],[8,0,1,8,1,7,7,1,5,-1,0,0,0,0,0,0],[3,1,5,3,5,7,-1,0,0,0,0,0,0,0,0,0],[7,9,5,7,8,9,1,2,10,-1,0,0,0,0,0,0],[1,2,10,0,9,5,0,5,3,3,5,7,-1,0,0,0],[7,8,5,5,2,10,8,2,5,8,0,2,-1,0,0,0],[10,3,2,10,5,3,3,5,7,-1,0,0,0,0,0,0],[9,7,8,9,5,7,11,2,3,-1,0,0,0,0,0,0],[0,9,2,2,7,11,2,9,7,7,9,5,-1,0,0,0],[3,11,2,8,0,1,8,1,7,7,1,5,-1,0,0,0],[2,7,11,2,1,7,7,1,5,-1,0,0,0,0,0,0],[11,1,3,11,10,1,7,8,9,7,9,5,-1,0,0,0],[11,10,1,11,1,7,7,1,0,7,0,9,7,9,5,-1],[5,7,8,5,8,10,10,8,0,10,0,3,10,3,11,-1],[11,10,5,11,5,7,-1,0,0,0,0,0,0,0,0,0],[10,6,5,-1,0,0,0,0,0,0,0,0,0,0,0,0],[0,8,3,10,6,5,-1,0,0,0,0,0,0,0,0,0],[9,0,1,5,10,6,-1,0,0,0,0,0,0,0,0,0],[8,1,9,8,3,1,10,6,5,-1,0,0,0,0,0,0],[6,1,2,6,5,1,-1,0,0,0,0,0,0,0,0,0],[6,1,2,6,5,1,0,8,3,-1,0,0,0,0,0,0],[5,9,0,5,0,6,6,0,2,-1,0,0,0,0,0,0],[6,5,2,2,8,3,5,8,2,5,9,8,-1,0,0,0],[2,3,11,10,6,5,-1,0,0,0,0,0,0,0,0,0],[0,11,2,0,8,11,6,5,10,-1,0,0,0,0,0,0],[0,1,9,3,11,2,10,6,5,-1,0,0,0,0,0,0],[10,6,5,2,1,9,2,9,11,11,9,8,-1,0,0,0],[11,6,5,11,5,3,3,5,1,-1,0,0,0,0,0,0],[11,6,8,8,1,0,8,6,1,1,6,5,-1,0,0,0],[0,3,11,0,11,6,0,6,9,9,6,5,-1,0,0,0],[5,11,6,5,9,11,11,9,8,-1,0,0,0,0,0,0],[7,8,4,6,5,10,-1,0,0,0,0,0,0,0,0,0],[3,4,7,3,0,4,5,10,6,-1,0,0,0,0,0,0],[6,5,10,7,8,4,9,0,1,-1,0,0,0,0,0,0],[5,10,6,9,4,7,9,7,1,1,7,3,-1,0,0,0],[1,6,5,1,2,6,7,8,4,-1,0,0,0,0,0,0],[7,0,4,7,3,0,6,5,1,6,1,2,-1,0,0,0],[4,7,8,5,9,0,5,0,6,6,0,2,-1,0,0,0],[2,6,5,2,5,3,3,5,9,3,9,4,3,4,7,-1],[4,7,8,5,10,6,11,2,3,-1,0,0,0,0,0,0],[6,5,10,7,11,2,7,2,4,4,2,0,-1,0,0,0],[4,7,8,9,0,1,6,5,10,3,11,2,-1,0,0,0],[6,5,10,11,4,7,11,2,4,4,2,9,9,2,1,-1],[7,8,4,11,6,5,11,5,3,3,5,1,-1,0,0,0],[0,4,7,0,7,1,1,7,11,1,11,6,1,6,5,-1],[4,7,8,9,6,5,9,0,6,6,0,11,11,0,3,-1],[7,11,4,11,9,4,11,5,9,11,6,5,-1,0,0,0],[10,4,9,10,6,4,-1,0,0,0,0,0,0,0,0,0],[10,4,9,10,6,4,8,3,0,-1,0,0,0,0,0,0],[1,10,6,1,6,0,0,6,4,-1,0,0,0,0,0,0],[4,8,6,6,1,10,6,8,1,1,8,3,-1,0,0,0],[9,1,2,9,2,4,4,2,6,-1,0,0,0,0,0,0],[0,8,3,9,1,2,9,2,4,4,2,6,-1,0,0,0],[0,2,6,0,6,4,-1,0,0,0,0,0,0,0,0,0],[3,4,8,3,2,4,4,2,6,-1,0,0,0,0,0,0],[4,10,6,4,9,10,2,3,11,-1,0,0,0,0,0,0],[8,2,0,8,11,2,4,9,10,4,10,6,-1,0,0,0],[2,3,11,1,10,6,1,6,0,0,6,4,-1,0,0,0],[8,11,2,8,2,4,4,2,1,4,1,10,4,10,6,-1],[3,11,1,1,4,9,11,4,1,11,6,4,-1,0,0,0],[6,4,9,6,9,11,11,9,1,11,1,0,11,0,8,-1],[11,0,3,11,6,0,0,6,4,-1,0,0,0,0,0,0],[8,11,6,8,6,4,-1,0,0,0,0,0,0,0,0,0],[6,7,8,6,8,10,10,8,9,-1,0,0,0,0,0,0],[3,0,7,7,10,6,0,10,7,0,9,10,-1,0,0,0],[1,10,6,1,6,7,1,7,0,0,7,8,-1,0,0,0],[6,1,10,6,7,1,1,7,3,-1,0,0,0,0,0,0],[9,1,8,8,6,7,8,1,6,6,1,2,-1,0,0,0],[7,3,0,7,0,6,6,0,9,6,9,1,6,1,2,-1],[8,6,7,8,0,6,6,0,2,-1,0,0,0,0,0,0],[2,6,7,2,7,3,-1,0,0,0,0,0,0,0,0,0],[11,2,3,6,7,8,6,8,10,10,8,9,-1,0,0,0],[9,10,6,9,6,0,0,6,7,0,7,11,0,11,2,-1],[3,11,2,0,7,8,0,1,7,7,1,6,6,1,10,-1],[6,7,10,7,1,10,7,2,1,7,11,2,-1,0,0,0],[1,3,11,1,11,9,9,11,6,9,6,7,9,7,8,-1],[6,7,11,9,1,0,-1,0,0,0,0,0,0,0,0,0],[8,0,7,0,6,7,0,11,6,0,3,11,-1,0,0,0],[6,7,11,-1,0,0,0,0,0,0,0,0,0,0,0,0],[6,11,7,-1,0,0,0,0,0,0,0,0,0,0,0,0],[3,0,8,11,7,6,-1,0,0,0,0,0,0,0,0,0],[6,11,7,9,0,1,-1,0,0,0,0,0,0,0,0,0],[1,8,3,1,9,8,7,6,11,-1,0,0,0,0,0,0],[11,7,6,2,10,1,-1,0,0,0,0,0,0,0,0,0],[1,2,10,0,8,3,11,7,6,-1,0,0,0,0,0,0],[9,2,10,9,0,2,11,7,6,-1,0,0,0,0,0,0],[11,7,6,3,2,10,3,10,8,8,10,9,-1,0,0,0],[2,7,6,2,3,7,-1,0,0,0,0,0,0,0,0,0],[8,7,6,8,6,0,0,6,2,-1,0,0,0,0,0,0],[7,2,3,7,6,2,1,9,0,-1,0,0,0,0,0,0],[8,7,9,9,2,1,9,7,2,2,7,6,-1,0,0,0],[6,10,1,6,1,7,7,1,3,-1,0,0,0,0,0,0],[6,10,1,6,1,0,6,0,7,7,0,8,-1,0,0,0],[7,6,3,3,9,0,6,9,3,6,10,9,-1,0,0,0],[6,8,7,6,10,8,8,10,9,-1,0,0,0,0,0,0],[8,6,11,8,4,6,-1,0,0,0,0,0,0,0,0,0],[11,3,0,11,0,6,6,0,4,-1,0,0,0,0,0,0],[6,8,4,6,11,8,0,1,9,-1,0,0,0,0,0,0],[1,9,3,3,6,11,9,6,3,9,4,6,-1,0,0,0],[8,6,11,8,4,6,10,1,2,-1,0,0,0,0,0,0],[2,10,1,11,3,0,11,0,6,6,0,4,-1,0,0,0],[11,4,6,11,8,4,2,10,9,2,9,0,-1,0,0,0],[4,6,11,4,11,9,9,11,3,9,3,2,9,2,10,-1],[3,8,4,3,4,2,2,4,6,-1,0,0,0,0,0,0],[2,0,4,2,4,6,-1,0,0,0,0,0,0,0,0,0],[0,1,9,3,8,4,3,4,2,2,4,6,-1,0,0,0],[9,2,1,9,4,2,2,4,6,-1,0,0,0,0,0,0],[6,10,4,4,3,8,4,10,3,3,10,1,-1,0,0,0],[1,6,10,1,0,6,6,0,4,-1,0,0,0,0,0,0],[10,9,0,10,0,6,6,0,3,6,3,8,6,8,4,-1],[10,9,4,10,4,6,-1,0,0,0,0,0,0,0,0,0],[6,11,7,5,4,9,-1,0,0,0,0,0,0,0,0,0],[0,8,3,9,5,4,7,6,11,-1,0,0,0,0,0,0],[0,5,4,0,1,5,6,11,7,-1,0,0,0,0,0,0],[7,6,11,4,8,3,4,3,5,5,3,1,-1,0,0,0],[2,10,1,11,7,6,5,4,9,-1,0,0,0,0,0,0],[0,8,3,1,2,10,4,9,5,11,7,6,-1,0,0,0],[6,11,7,10,5,4,10,4,2,2,4,0,-1,0,0,0],[6,11,7,5,2,10,5,4,2,2,4,3,3,4,8,-1],[2,7,6,2,3,7,4,9,5,-1,0,0,0,0,0,0],[4,9,5,8,7,6,8,6,0,0,6,2,-1,0,0,0],[3,6,2,3,7,6,0,1,5,0,5,4,-1,0,0,0],[1,5,4,1,4,2,2,4,8,2,8,7,2,7,6,-1],[5,4,9,6,10,1,6,1,7,7,1,3,-1,0,0,0],[4,9,5,7,0,8,7,6,0,0,6,1,1,6,10,-1],[3,7,6,3,6,0,0,6,10,0,10,5,0,5,4,-1],[4,8,5,8,10,5,8,6,10,8,7,6,-1,0,0,0],[5,6,11,5,11,9,9,11,8,-1,0,0,0,0,0,0],[0,9,5,0,5,6,0,6,3,3,6,11,-1,0,0,0],[8,0,11,11,5,6,11,0,5,5,0,1,-1,0,0,0],[11,5,6,11,3,5,5,3,1,-1,0,0,0,0,0,0],[10,1,2,5,6,11,5,11,9,9,11,8,-1,0,0,0],[2,10,1,3,6,11,3,0,6,6,0,5,5,0,9,-1],[0,2,10,0,10,8,8,10,5,8,5,6,8,6,11,-1],[11,3,6,3,5,6,3,10,5,3,2,10,-1,0,0,0],[2,3,6,6,9,5,3,9,6,3,8,9,-1,0,0,0],[5,0,9,5,6,0,0,6,2,-1,0,0,0,0,0,0],[6,2,3,6,3,5,5,3,8,5,8,0,5,0,1,-1],[6,2,1,6,1,5,-1,0,0,0,0,0,0,0,0,0],[8,9,5,8,5,3,3,5,6,3,6,10,3,10,1,-1],[1,0,10,0,6,10,0,5,6,0,9,5,-1,0,0,0],[0,3,8,10,5,6,-1,0,0,0,0,0,0,0,0,0],[10,5,6,-1,0,0,0,0,0,0,0,0,0,0,0,0],[11,5,10,11,7,5,-1,0,0,0,0,0,0,0,0,0],[5,11,7,5,10,11,3,0,8,-1,0,0,0,0,0,0],[11,5,10,11,7,5,9,0,1,-1,0,0,0,0,0,0],[9,3,1,9,8,3,5,10,11,5,11,7,-1,0,0,0],[2,11,7,2,7,1,1,7,5,-1,0,0,0,0,0,0],[3,0,8,2,11,7,2,7,1,1,7,5,-1,0,0,0],[2,11,0,0,5,9,0,11,5,5,11,7,-1,0,0,0],[9,8,3,9,3,5,5,3,2,5,2,11,5,11,7,-1],[10,2,3,10,3,5,5,3,7,-1,0,0,0,0,0,0],[5,10,7,7,0,8,10,0,7,10,2,0,-1,0,0,0],[1,9,0,10,2,3,10,3,5,5,3,7,-1,0,0,0],[7,5,10,7,10,8,8,10,2,8,2,1,8,1,9,-1],[7,5,1,7,1,3,-1,0,0,0,0,0,0,0,0,0],[8,1,0,8,7,1,1,7,5,-1,0,0,0,0,0,0],[0,5,9,0,3,5,5,3,7,-1,0,0,0,0,0,0],[7,5,9,7,9,8,-1,0,0,0,0,0,0,0,0,0],[4,5,10,4,10,8,8,10,11,-1,0,0,0,0,0,0],[11,3,10,10,4,5,10,3,4,4,3,0,-1,0,0,0],[9,0,1,4,5,10,4,10,8,8,10,11,-1,0,0,0],[3,1,9,3,9,11,11,9,4,11,4,5,11,5,10,-1],[8,4,11,11,1,2,4,1,11,4,5,1,-1,0,0,0],[5,1,2,5,2,4,4,2,11,4,11,3,4,3,0,-1],[11,8,4,11,4,2,2,4,5,2,5,9,2,9,0,-1],[2,11,3,5,9,4,-1,0,0,0,0,0,0,0,0,0],[4,5,10,4,10,2,4,2,8,8,2,3,-1,0,0,0],[10,4,5,10,2,4,4,2,0,-1,0,0,0,0,0,0],[0,1,9,8,2,3,8,4,2,2,4,10,10,4,5,-1],[10,2,5,2,4,5,2,9,4,2,1,9,-1,0,0,0],[4,3,8,4,5,3,3,5,1,-1,0,0,0,0,0,0],[0,4,5,0,5,1,-1,0,0,0,0,0,0,0,0,0],[0,3,9,3,5,9,3,4,5,3,8,4,-1,0,0,0],[4,5,9,-1,0,0,0,0,0,0,0,0,0,0,0,0],[7,4,9,7,9,11,11,9,10,-1,0,0,0,0,0,0],[8,3,0,7,4,9,7,9,11,11,9,10,-1,0,0,0],[0,1,4,4,11,7,1,11,4,1,10,11,-1,0,0,0],[10,11,7,10,7,1,1,7,4,1,4,8,1,8,3,-1],[2,11,7,2,7,4,2,4,1,1,4,9,-1,0,0,0],[0,8,3,1,4,9,1,2,4,4,2,7,7,2,11,-1],[7,2,11,7,4,2,2,4,0,-1,0,0,0,0,0,0],[7,4,11,4,2,11,4,3,2,4,8,3,-1,0,0,0],[7,4,3,3,10,2,3,4,10,10,4,9,-1,0,0,0],[2,0,8,2,8,10,10,8,7,10,7,4,10,4,9,-1],[4,0,1,4,1,7,7,1,10,7,10,2,7,2,3,-1],[4,8,7,1,10,2,-1,0,0,0,0,0,0,0,0,0],[9,7,4,9,1,7,7,1,3,-1,0,0,0,0,0,0],[8,7,0,7,1,0,7,9,1,7,4,9,-1,0,0,0],[4,0,3,4,3,7,-1,0,0,0,0,0,0,0,0,0],[4,8,7,-1,0,0,0,0,0,0,0,0,0,0,0,0],[8,9,10,8,10,11,-1,0,0,0,0,0,0,0,0,0],[0,11,3,0,9,11,11,9,10,-1,0,0,0,0,0,0],[1,8,0,1,10,8,8,10,11,-1,0,0,0,0,0,0],[3,1,10,3,10,11,-1,0,0,0,0,0,0,0,0,0],[2,9,1,2,11,9,9,11,8,-1,0,0,0,0,0,0],[0,9,3,9,11,3,9,2,11,9,1,2,-1,0,0,0],[11,8,0,11,0,2,-1,0,0,0,0,0,0,0,0,0],[2,11,3,-1,0,0,0,0,0,0,0,0,0,0,0,0],[3,10,2,3,8,10,10,8,9,-1,0,0,0,0,0,0],[9,10,2,9,2,0,-1,0,0,0,0,0,0,0,0,0],[3,8,2,8,10,2,8,1,10,8,0,1,-1,0,0,0],[2,1,10,-1,0,0,0,0,0,0,0,0,0,0,0,0],[8,9,1,8,1,3,-1,0,0,0,0,0,0,0,0,0],[1,0,9,-1,0,0,0,0,0,0,0,0,0,0,0,0],[0,3,8,-1,0,0,0,0,0,0,0,0,0,0,0,0],[-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]],F=[[0,1],[1,2],[2,3],[3,0],[4,5],[6,5],[6,7],[7,4],[0,4],[1,5],[2,6],[3,7]],U=[[0,0,0],[1,0,0],[1,1,0],[0,1,0],[0,0,1],[1,0,1],[1,1,1],[0,1,1]],D=function(c,t,e,n){for(let i=0;i<U.length;++i){const r=U[i],s=((e[2]+r[2])*t[1]+e[1]+r[1])*t[0]+e[0]+r[0];n[i]=c[s]}},I=function(c,t,e,n,i,r){let s=0;Math.abs(e-n)<1e-4?s=0:s=(i-e)/(n-e),r[0]=c[0]+s*(t[0]-c[0]),r[1]=c[1]+s*(t[1]-c[1]),r[2]=c[2]+s*(t[2]-c[2])};class S{constructor(t,e){this.len=0,this.capacity=t,e==="uint8"?this.buffer=new Uint8Array(t):e==="int8"?this.buffer=new Int8Array(t):e==="uint16"?this.buffer=new Uint16Array(t):e==="int16"?this.buffer=new Int16Array(t):e==="uint32"?this.buffer=new Uint32Array(t):e==="int32"?this.buffer=new Int32Array(t):e==="float32"?this.buffer=new Float32Array(t):e==="float64"?this.buffer=new Float64Array(t):console.log("ERROR: unsupported type "+e)}append(t){if(this.len+t.length>=this.capacity){const e=Math.floor(this.capacity*1.5),n=new this.buffer.constructor(e);n.set(this.buffer),this.capacity=e,this.buffer=n}this.buffer.set(t,this.len),this.len+=t.length}clear(){this.len=0}stride(){return this.buffer.BYTES_PER_ELEMENT}view(t,e){return new this.buffer.constructor(this.buffer.buffer,t,e)}}function V(c,t,e){const n=new S(3,"float32");n.clear();const i=[0,0,0,0,0,0,0,0],r=[0,0,0];for(let s=0;s<t[2]-1;++s)for(let l=0;l<t[1]-1;++l)for(let o=0;o<t[0]-1;++o){D(c,t,[o,l,s],i);let f=0;for(let h=0;h<8;++h)i[h]<=e&&(f|=1<<h);for(let h=0;j[f][h]!==-1;++h){const g=F[j[f][h]][0],a=F[j[f][h]][1];I(U[g],U[a],i[g],i[a],e,r),r[0]+=o+.5,r[1]+=l+.5,r[2]+=s+.5,n.append(r)}}return n.view(0,n.len)}function N(c,t,e=!1){const n=c.length/3,i=[c[0],c[1],c[2]],r=[];let s=0;for(let a=0;a<c.length;a+=3){const u=[c[a],c[a+1],c[a+2]],y=s++,x=-1,w=Math.sqrt(Math.pow(u[0]-i[0],2)+Math.pow(u[1]-i[1],2)+Math.pow(u[2]-i[2],2));r.push({inIndex:y,distance:w,xyz:u,outIndex:x})}r.sort((a,u)=>a.distance-u.distance);const l=1e-5;let o=0;const f=new Int32Array(n).fill(-1),h=new Int32Array(n).fill(-1);for(let a=0;a<n;a++){const u=r[a];if(u.outIndex>=0)continue;let y=a;for(;y<n&&r[y].distance-u.distance<l;)Math.sqrt(Math.pow(u.xyz[0]-r[y].xyz[0],2)+Math.pow(u.xyz[1]-r[y].xyz[1],2)+Math.pow(u.xyz[2]-r[y].xyz[2],2))<l&&(r[y].outIndex=o,h[r[y].inIndex]=o),y++;f[o]=a,o++}if(n===o)return e&&console.log("Unify vertices found no shared vertices"),{vertices:c,triangles:t};const g=new Float32Array(o*3);s=0;for(let a=0;a<o;a++){const u=f[a];g[s++]=r[u].xyz[0],g[s++]=r[u].xyz[1],g[s++]=r[u].xyz[2]}for(let a=0;a<t.length;a++)t[a]=h[t[a]];return e&&console.log(`Vertex welding ${n} -> ${o}`),{vertices:g,triangles:t}}function T(c){return c[0][0]*(c[1][1]*c[2][2]-c[1][2]*c[2][1])-c[0][1]*(c[1][0]*c[2][2]-c[1][2]*c[2][0])+c[0][2]*(c[1][0]*c[2][1]-c[1][1]*c[2][0])>0}function _(c){for(let t=0;t<c.length;t+=3){const e=c[t+1];c[t+1]=c[t+2],c[t+2]=e}return c}function q(c,t){const e=c.vertices;for(let i=0;i<e.length;i+=3){const r=[e[i],e[i+1],e[i+2]];r[0]-=.5,r[1]-=.5,r[2]-=.5,e[i+0]=r[0]*t[0][0]+r[1]*t[0][1]+r[2]*t[0][2]+t[0][3],e[i+1]=r[0]*t[1][0]+r[1]*t[1][1]+r[2]*t[1][2]+t[1][3],e[i+2]=r[0]*t[2][0]+r[1]*t[2][1]+r[2]*t[2][2]+t[2][3]}return T(t)||(c.triangles=_(c.triangles)),c}function $(c,t=!0){let e=c;const n=e.length/3;let i=0;for(let s=0;s<e.length;s+=3)e[s]===e[s+1]||e[s]===e[s+2]||e[s+1]===e[s+2]||i++;if(i===n)return c;if(i===0)throw new Error("invalid mesh: no valid triangles");t&&console.log(`${n-i} of the ${n} triangles are degenerate`),e=c.slice(),c=new Uint32Array(i*3);let r=0;for(let s=0;s<e.length;s+=3)e[s]===e[s+1]||e[s]===e[s+2]||e[s+1]===e[s+2]||(c[r++]=e[s],c[r++]=e[s+1],c[r++]=e[s+2]);return c}function O(c,t,e=!0){const n=t[0],i=t[1],r=t[2];if(n<3||i<3||r<3)return;const s=n*i*r;let l=6;e&&(l=26);const o=new Int32Array(l);if(e){let y=0;for(let x=-1;x<=1;x++)for(let w=-1;w<=1;w++)for(let v=-1;v<=1;v++)v===0&&w===0&&x===0||(o[y]=v+w*n+x*n*i,y++)}else o[0]=n*i,o[1]=-o[0],o[2]=n,o[3]=-o[2],o[4]=1,o[5]=-1;const f=new Int32Array(s),h=new Uint8Array(s);for(let y=0;y<s;y++)h[y]=c[y]>0?1:0;let g=0,a=-1,u=0;for(let y=0;y<r;y++){const x=y===0||y===r-1?1:0;for(let w=0;w<i;w++){const v=w===0||w===i-1?1:0;for(let d=0;d<n;d++)h[u]===0&&(x||v||d===0||d===n-1)&&(h[u]=1,a++,f[a]=u),u++}}for(;a>=g;){for(let y=0;y<l;y++){const x=f[g]+o[y];x<0||x>=s||h[x]===0&&(h[x]=1,a++,f[a]=x)}g++}for(let y=0;y<s;y++)h[y]===0&&(c[y]=1);return c}function P(c,t,e=1,n=!1){let i=c.map(o=>o>=e?1:0);const r=i.reduce((o,f)=>o+(f!==0?1:0),0);i=O(i,t);const s=i.reduce((o,f)=>o+(f!==0?1:0),0);if(r===s)return c;n&&console.log(`${s-r} voxels were bubbles`);const l=e+1;for(let o=0;o<c.length;o++)i[o]!==0&&(c[o]=Math.max(c[o],l));return c}function L(c,t,e=1){const n=new k,i=26,r=!0,s=!0,l=c.slice().fill(0);for(let h=0;h<c.length;h++)c[h]>=e&&(l[h]=1);const[o,f]=n.bwlabel(l,t,i,r,s);for(let h=0;h<c.length;h++)c[h]*=f[h];return c}function R(c,t){const[e,n,i]=t,r=e*n;let s=e-1;for(let l=0;l<i;l++){const o=l*r;for(let f=0;f<n;f++){const h=f*e;c[o+h]=0,c[o+h+s]=0}}s=(n-1)*e;for(let l=0;l<i;l++){const o=l*r;for(let f=0;f<e;f++)c[o+f]=0,c[o+f+s]=0}s=(i-1)*r;for(let l=0;l<r;l++)c[l]=0,c[l+s]=0;return c}function C(c,t){const e=c.length/3,n=t.length/3,i=new Float64Array(e*3).fill(0),r=new Float64Array(e).fill(0);for(let s=0;s<n;s++){const l=t[s*3],o=t[s*3+1],f=t[s*3+2];r[l]+=2,i[l*3]+=c[o*3]+c[f*3],i[l*3+1]+=c[o*3+1]+c[f*3+1],i[l*3+2]+=c[o*3+2]+c[f*3+2],r[o]+=2,i[o*3]+=c[l*3]+c[f*3],i[o*3+1]+=c[l*3+1]+c[f*3+1],i[o*3+2]+=c[l*3+2]+c[f*3+2],r[f]+=2,i[f*3]+=c[l*3]+c[o*3],i[f*3+1]+=c[l*3+1]+c[o*3+1],i[f*3+2]+=c[l*3+2]+c[o*3+2]}for(let s=0;s<e;s++)r[s]<=0||(c[s*3]=i[s*3]/r[s],c[s*3+1]=i[s*3+1]/r[s],c[s*3+2]=i[s*3+2]/r[s])}function B(c,t,e=100,n=.1,i=.5,r=!0){if(e<1)return;const s=c.length/3,l=t.length/3,o=1-n,f=1-i,h=new Float32Array(s*3).fill(0),g=new Array(s*3).fill(0),a=new Float32Array(c);for(let x=0;x<e;x++){h.set(a),C(a,t);for(let w=0;w<s;w++){const v=w*3,d=w*3;g[v]=a[v]-(n*c[d]+o*h[v]),g[v+1]=a[v+1]-(n*c[d+1]+o*h[v+1]),g[v+2]=a[v+2]-(n*c[d+2]+o*h[v+2])}h.set(g),C(h,t);for(let w=0;w<s;w++){const v=w*3;a[v]=a[v]-(i*g[v]+f*h[v]),a[v+1]=a[v+1]-(i*g[v+1]+f*h[v+1]),a[v+2]=a[v+2]-(i*g[v+2]+f*h[v+2])}}if(!r){c.set(a);return}const u=new Array(s).fill(null).map(()=>({border:!1,p:[0,0,0]}));for(let x=0;x<s;x++)u[x].p=[c[x*3],c[x*3+1],c[x*3+2]];const y=new Array(l).fill(null).map(()=>({deleted:0,v:[0,0,0]}));for(let x=0;x<l;x++)y[x].v[0]=t[x*3],y[x].v[1]=t[x*3+1],y[x].v[2]=t[x*3+2];for(let x=0;x<s;x++)u[x].border||(c[x*3]=a[x*3],c[x*3+1]=a[x*3+1],c[x*3+2]=a[x*3+2])}function J(c,t,e,n=!1,i=!1,r=5,s=[],l=!0){if(t[0]<3||t[1]<3||t[2]<3)throw new Error("volume too small for meshification");if(e<0){let h=c[0];for(let g=0;g<c.length;g++)h=Math.min(c[g],h);if(h<0){for(let g=0;g<c.length;g++)c[g]=c[g]-h;e=e-h}}c=R(c,t),n&&(c=L(c,t,e)),i&&(c=P(c,t,e,l));let o=[];if(o.vertices=V(c,t,e),o.vertices.length<3)throw new Error("No voxels survive isovalue threshold");const f=o.vertices.length/(3*3);o.triangles=new Uint32Array(f*3);for(let h=0;h<o.triangles.length;h++)o.triangles[h]=h;return o=N(o.vertices,o.triangles,l),l&&console.log(`Vertices ${o.vertices.length/3} Triangles ${o.triangles.length/3}`),o.triangles=$(o.triangles,l),B(o.vertices,o.triangles,r),s.length===4&&(o=q(o,s)),{vertices:o.vertices,triangles:o.triangles}}class K{constructor(t,e,n,i=7,r=!1,s=!0){this.vertices=[],this.triangles=[],this.refs=new Array(e.length),this.targetCount=n,this.aggressiveness=i,this.finishLossless=r,this.verbose=s,this.init(t,e)}init(t,e){for(let n=0;n<t.length;n+=3)this.vertices.push({p:{x:t[n],y:t[n+1],z:t[n+2]},tstart:0,tcount:0,q:new Float32Array(10).fill(0),border:0});for(let n=0;n<e.length;n+=3)this.triangles.push({v:[e[n],e[n+1],e[n+2]],err:new Float32Array(4).fill(0),dirty:!1,deleted:!1,n:{x:0,y:0,z:0}})}symMat1(t,e){t.fill(e)}symMat4(t,e,n,i,r){t[0]=e*e,t[1]=e*n,t[2]=e*i,t[3]=e*r,t[4]=n*n,t[5]=n*i,t[6]=n*r,t[7]=i*i,t[8]=i*r,t[9]=r*r}symMat10(t,e,n,i,r,s,l,o,f,h,g){t[0]=e,t[1]=n,t[2]=i,t[3]=r,t[4]=s,t[5]=l,t[6]=o,t[7]=f,t[8]=h,t[9]=g}symMatAdd(t,e,n){for(let i=0;i<10;i++)t[i]=e[i]+n[i]}symMatDet(t,e,n,i,r,s,l,o,f,h){return t[e]*t[s]*t[h]+t[i]*t[r]*t[f]+t[n]*t[l]*t[o]-t[i]*t[s]*t[o]-t[e]*t[l]*t[f]-t[n]*t[r]*t[h]}vCross(t,e){return{x:t.y*e.z-t.z*e.y,y:t.z*e.x-t.x*e.z,z:t.x*e.y-t.y*e.x}}vSum(t,e){return{x:t.x+e.x,y:t.y+e.y,z:t.z+e.z}}vSubtract(t,e){return{x:t.x-e.x,y:t.y-e.y,z:t.z-e.z}}vNormalize(t){const e=Math.sqrt(t.x*t.x+t.y*t.y+t.z*t.z);e<=0||(t.x/=e,t.y/=e,t.z/=e)}vDot(t,e){return t.x*e.x+t.y*e.y+t.z*e.z}vMult(t,e){return{x:t.x*e,y:t.y*e,z:t.z*e}}vertexError(t,e,n,i){return t[0]*e*e+2*t[1]*e*n+2*t[2]*e*i+2*t[3]*e+t[4]*n*n+2*t[5]*n*i+2*t[6]*n+t[7]*i*i+2*t[8]*i+t[9]}calculateErrorFast(t,e){const n=new Float32Array(10);this.symMatAdd(n,this.vertices[t].q,this.vertices[e].q);const i=this.vertices[t].border+this.vertices[e].border,r=this.symMatDet(n,0,1,2,1,4,5,2,5,7);if(r!==0&&i===0){const u=-1/r*this.symMatDet(n,1,2,3,4,5,6,5,7,8),y=1/r*this.symMatDet(n,0,2,3,1,5,6,2,7,8),x=-1/r*this.symMatDet(n,0,1,3,1,4,6,2,5,8);return this.vertexError(n,u,y,x)}const s=this.vertices[t].p,l=this.vertices[e].p,o=this.vMult(this.vSum(s,l),.5),f=this.vertexError(n,s.x,s.y,s.z),h=this.vertexError(n,l.x,l.y,l.z),g=this.vertexError(n,o.x,o.y,o.z);return Math.min(f,Math.min(h,g))}calculateError(t,e,n){const i=new Float32Array(10);this.symMatAdd(i,this.vertices[t].q,this.vertices[e].q);const r=this.vertices[t].border+this.vertices[e].border,s=this.symMatDet(i,0,1,2,1,4,5,2,5,7);if(s!==0&&r===0)return n.x=-1/s*this.symMatDet(i,1,2,3,4,5,6,5,7,8),n.y=1/s*this.symMatDet(i,0,2,3,1,5,6,2,7,8),n.z=-1/s*this.symMatDet(i,0,1,3,1,4,6,2,5,8),this.vertexError(i,n.x,n.y,n.z);const l=this.vertices[t].p,o=this.vertices[e].p,f=this.vMult(this.vSum(l,o),.5),h=this.vertexError(i,l.x,l.y,l.z),g=this.vertexError(i,o.x,o.y,o.z),a=this.vertexError(i,f.x,f.y,f.z),u=Math.min(h,Math.min(g,a));return h===u&&(n=l),g===u&&(n=o),a===u&&(n=f),u}updateMesh(t){if(t>0){let r=0;for(let s=0;s<this.triangles.length;s++)this.triangles[s].deleted||(this.triangles[r++]=this.triangles[s]);this.triangles.length=r}for(const r of this.vertices)r.tstart=0,r.tcount=0;for(let r=0;r<this.triangles.length;r++)for(let s=0;s<3;s++)this.vertices[this.triangles[r].v[s]].tcount++;let e=0;for(const r of this.vertices)r.tstart=e,e+=r.tcount,r.tcount=0;this.refs.length=this.triangles.length*3;for(let r=0;r<this.triangles.length;r++){const s=this.triangles[r];for(let l=0;l<3;l++){const o=this.vertices[s.v[l]];this.refs[o.tstart+o.tcount]={tid:r,tvertex:l},o.tcount++}}if(t!==0)return;for(const r of this.vertices)r.border=0;const n=new Uint32Array(this.vertices.length),i=new Uint32Array(this.vertices.length);for(let r=0;r<this.vertices.length;r++){let s=0;const l=this.vertices[r];for(let o=0;o<l.tcount;o++){const f=this.refs[l.tstart+o].tid,h=this.triangles[f];for(let g=0;g<3;g++){const a=h.v[g];let u=0;for(;u<s&&n[u]!==a;)u++;u===s?(i[s]=1,n[s]=a,s++):i[u]++}}for(let o=0;o<s;o++)i[o]===1&&(this.vertices[n[o]].border=1)}for(const r of this.vertices)this.symMat1(r.q,0);for(let r=0;r<this.triangles.length;r++){const s=this.triangles[r],l=[];for(let f=0;f<3;f++)l[f]=this.vertices[s.v[f]].p;const o=this.vCross(this.vSubtract(l[1],l[0]),this.vSubtract(l[2],l[0]));this.vNormalize(o),s.n=o;for(let f=0;f<3;f++){const h=new Float32Array(10);this.symMat4(h,o.x,o.y,o.z,-this.vDot(o,l[0])),this.symMatAdd(this.vertices[s.v[f]].q,this.vertices[s.v[f]].q,h)}}for(let r=0;r<this.triangles.length;r++){const s=this.triangles[r];for(let l=0;l<3;l++)s.err[l]=this.calculateErrorFast(s.v[l],s.v[(l+1)%3]);s.err[3]=Math.min(s.err[0],Math.min(s.err[1],s.err[2]))}}compactMesh(){let t=0;for(const e of this.vertices)e.tcount=0;for(let e=0;e<this.triangles.length;e++)if(!this.triangles[e].deleted){this.triangles[t++]=this.triangles[e];for(let n=0;n<3;n++)this.vertices[this.triangles[e].v[n]].tcount=1}this.triangles.length=t,t=0;for(let e=0;e<this.vertices.length;e++)this.vertices[e].tcount&&(this.vertices[e].tstart=t,this.vertices[t].p=this.vertices[e].p,t++);for(let e=0;e<this.triangles.length;e++){const n=this.triangles[e];for(let i=0;i<3;i++)n.v[i]=this.vertices[n.v[i]].tstart}this.vertices.length=t}updateTriangles(t,e,n,i){for(let r=0;r<e.tcount;r++){const s=this.refs[e.tstart+r],l=this.triangles[s.tid];if(!l.deleted){if(n[r]){l.deleted=!0,i++;continue}l.v[s.tvertex]=t,l.dirty=!0,l.err[0]=this.calculateErrorFast(l.v[0],l.v[1]),l.err[1]=this.calculateErrorFast(l.v[1],l.v[2]),l.err[2]=this.calculateErrorFast(l.v[2],l.v[0]),l.err[3]=Math.min(l.err[0],Math.min(l.err[1],l.err[2])),this.refs.push(s)}}return i}flipped(t,e,n,i,r,s){for(let l=0;l<i.tcount;l++){const o=this.triangles[this.refs[i.tstart+l].tid];if(o.deleted)continue;const f=this.refs[i.tstart+l].tvertex,h=o.v[(f+1)%3],g=o.v[(f+2)%3];if(h===n||g===n){s[l]=!0;continue}const a=this.vSubtract(this.vertices[h].p,t);this.vNormalize(a);const u=this.vSubtract(this.vertices[g].p,t);if(this.vNormalize(u),Math.abs(this.vDot(a,u))>.999)return!0;const y=this.vCross(a,u);if(this.vNormalize(y),s[l]=!1,this.vDot(y,o.n)<.2)return!0}return!1}simplify(t=!0){let e=0;const n=this.triangles.length,i=new Array(n*3).fill(!1),r=new Array(n*3).fill(!1),s=n;let l=100,o=!0,f=Number.EPSILON;this.aggressiveness<=5&&(l=500),this.targetCount>=s&&(o=!1,l=1e3);let h=0;for(let y=0;y<l;y++){if(o&&n-e<=this.targetCount){if(!this.finishLossless)break;o=!1,f=Number.EPSILON,l=1e3}if(o)y%5===0&&this.updateMesh(y),f=1e-9*Math.pow(y+3,this.aggressiveness);else{if(h===n-e)break;this.updateMesh(y)}h=n-e;for(let x=0;x<this.triangles.length;x++)this.triangles[x].dirty=!1;t&&y%5===0&&console.log(`iteration ${y} - triangles ${n-e} threshold ${f}`);for(let x=0;x<this.triangles.length;x++){const w=this.triangles[x];if(!(w.err[3]>f)&&!w.deleted&&!w.dirty){for(let v=0;v<3;v++)if(w.err[v]<f){const d=w.v[v],p=this.vertices[d],z=w.v[(v+1)%3],M=this.vertices[z];if(p.border!==M.border)continue;const b={x:0,y:0,z:0};if(this.calculateError(d,z,b),this.flipped(b,d,z,p,M,i)||this.flipped(b,z,d,M,p,r))continue;p.p=b,this.symMatAdd(p.q,M.q,p.q);const E=this.refs.length;e=this.updateTriangles(d,p,i,e),e=this.updateTriangles(d,M,r,e);const A=this.refs.length-E;A<=p.tcount?A&&this.refs.splice(p.tstart,A,...this.refs.slice(E,E+A)):p.tstart=E,p.tcount=A;break}if(o&&n-e<=this.targetCount)break}}}this.compactMesh();const g=new Float32Array(this.vertices.length*3);let a=0;for(const y of this.vertices)g[a++]=y.p.x,g[a++]=y.p.y,g[a++]=y.p.z;const u=new Uint32Array(this.triangles.length*3);a=0;for(const y of this.triangles)u[a++]=y.v[0],u[a++]=y.v[1],u[a++]=y.v[2];if(t){const y=Math.round(100*(u.length/3)/n);console.log(`Vertices ${g.length/3} Triangles ${u.length/3} ${y}%`)}return{vertices:g,triangles:u}}}function W(c,t,e=.5,n=7,i=!0,r=!0){const s=Math.ceil(t.length/3*e);return new K(c,t,s,n,i,r).simplify()}self.onmessage=function(c){const{img:t,dims:e,isoValue:n,largestCheck:i,bubbleCheck:r,smoothValue:s,affine:l,shrinkValue:o,verbose:f=!0}=c.data,h=new Float32Array(t);let g=new Date,a=J(h,e,n,i,r,s,l,f);o<1&&(a=W(a.vertices,a.triangles,o)),f&&console.log(new Date-g+"ms elapsed"),postMessage({vertices:a.vertices,triangles:a.triangles})};
